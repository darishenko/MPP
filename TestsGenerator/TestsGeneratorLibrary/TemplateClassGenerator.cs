using System.Collections.Generic;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using TestsGenerator.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace TestsGenerator
{
    public class TemplateClassGenerator
    {
        public List<TestClassInformation> GetTemplate(string sourceCode)
        {
            var templates = GetTestTemplates(sourceCode);
            var templatesList = new List<TestClassInformation>();
            if (templates.Count != 0)
            {
                
                foreach (var template in templates)
                {
                    var fileName = template.FileName;
                    var innerText = template.InnerText;
                    templatesList.Add(new TestClassInformation(fileName, innerText));
                }
                return  templatesList;
            }

            return null;
        }

        private List<TestClassInformation> GetTestTemplates(string sourceCode)
        {
            var syntaxProcessor = new SyntaxProcessor();
            var syntaxProcessResult = syntaxProcessor.Process(sourceCode);
            var result = new List<TestClassInformation>();
            foreach (var classInfo in syntaxProcessResult.Classes)
            {
                var namespaceDeclaration = NamespaceDeclaration(
                    QualifiedName(
                        IdentifierName(classInfo.NamespaceNameSpace),
                        IdentifierName("Tests")));
                
                var testClass = CompilationUnit()
                    .WithUsings(GetTemplateUsings(classInfo))
                    .WithMembers(SingletonList<MemberDeclarationSyntax>(namespaceDeclaration
                        .WithMembers(SingletonList<MemberDeclarationSyntax>(ClassDeclaration(classInfo.Name + "Tests")
                            .WithAttributeLists(
                                SingletonList(
                                    AttributeList(
                                        SingletonSeparatedList(
                                            Attribute(
                                                IdentifierName("TestClass"))))))
                            .WithModifiers(TokenList(Token(SyntaxKind.PublicKeyword)))
                            .WithMembers(GetTestMethods(classInfo.Methods))))));
                
                var fileName = classInfo.Name + "Tests.cs";
                var innerText = testClass.NormalizeWhitespace().ToFullString();
                result.Add(new TestClassInformation(fileName, innerText));
            }

            return result;
        }

        private SyntaxList<MemberDeclarationSyntax> GetTestMethods(List<string> methods)
        {
            var result = new List<MemberDeclarationSyntax>();
            foreach (var method in methods) result.Add(GenerateTestMethod(method));
            return new SyntaxList<MemberDeclarationSyntax>(result);
        }

        private MethodDeclarationSyntax GenerateTestMethod(string methodName)
        {
            var attributeForTemplate = "TestMethod";
            var methodBody = "Assert.Fail(\"autogenerated\");";
            return MethodDeclaration(
                    PredefinedType(
                        Token(SyntaxKind.VoidKeyword)),
                    Identifier(methodName + "Test"))
                .WithAttributeLists(
                    SingletonList(
                        AttributeList(
                            SingletonSeparatedList(
                                Attribute(
                                    IdentifierName(attributeForTemplate))))))
                .WithModifiers(TokenList(Token(SyntaxKind.PublicKeyword)))
                .WithBody(Block(ParseStatement(methodBody)));
        }

        private SyntaxList<UsingDirectiveSyntax> GetTemplateUsings(ClassInformation classInfo)
        {
            var usings = new List<UsingDirectiveSyntax>
            {
                UsingDirective
                (
                    IdentifierName("System")
                ),
                UsingDirective
                (
                    QualifiedName
                    (
                        QualifiedName
                        (
                            IdentifierName("System"),
                            IdentifierName("Collections")
                        ),
                        IdentifierName("Generic")
                    )
                ),
                UsingDirective
                (
                    QualifiedName
                    (
                        IdentifierName("System"),
                        IdentifierName("Linq")
                    )
                ),
                UsingDirective
                (
                    QualifiedName
                    (
                        QualifiedName
                        (
                            QualifiedName
                            (
                                IdentifierName("Microsoft"),
                                IdentifierName("VisualStudio")
                            ),
                            IdentifierName("TestTools")
                        ),
                        IdentifierName("UnitTesting")
                    )
                ),
                UsingDirective
                (
                    IdentifierName(classInfo.NamespaceNameSpace)
                )
            };
            return new SyntaxList<UsingDirectiveSyntax>(usings);
        }
    }
}